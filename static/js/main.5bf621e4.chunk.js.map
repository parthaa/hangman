{"version":3,"sources":["components/Char.js","App.js","serviceWorker.js","index.js"],"names":["charComp","props","react_default","a","createElement","style","display","padding","textAlign","margin","border","onClick","clicked","character","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","maxGuesses","getNewState","word","randomWord","length","secretWord","toLowerCase","filledWord","guesses","currentGuess","guessCounter","inputHandler","evt","key","match","concat","toConsumableArray","state","includes","setState","getFilledWord","i","push","getStatus","join","remainingGuesses","boxWord","map","index","Char","startNewGame","document","onkeydown","className","Component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5bf621e4.chunk.js","sourcesContent":["import React from 'react';\n\nconst charComp = (props) => {\n    let style = {\n        display: \"inline-block\",\n        padding: \"16px\",\n        textAlign: \"center\",\n        margin: \"16px\",\n        border: \"1px solid black\"\n    };\n    return (\n        <div style={style} onClick={props.clicked}>\n            <p> {props.character} </p>\n        </div>\n    );\n}\n\nexport default charComp;\n","import React, {Component} from 'react';\nimport randomWord from 'random-words';\nimport Char from './components/Char';\nimport './App.css';\n\nclass App extends Component {\n  maxGuesses = 10;\n  constructor(props) {\n    super(props);\n    this.state = this.getNewState();\n  }\n\n  getNewState = () => {\n    let word = randomWord();\n    while (word.length < 5) {\n      word = randomWord();\n    }\n    return {\n      secretWord: word.toLowerCase(),\n      filledWord: '',\n      guesses: [],\n      currentGuess: '',\n      guessCounter:0\n   }\n  }\n\n  inputHandler = (evt) => {\n    if(evt.key.match(/^[A-Z]$/i)) {\n      const props = {\n        currentGuess: evt.key.toLowerCase()\n      }\n\n      props.guesses=[...this.state.guesses,props.currentGuess];\n\n      if(!this.state.secretWord.includes(props.currentGuess)) {\n        props.guessCounter = this.state.guessCounter + 1;\n      }\n\n      this.setState(props);\n    }\n  }\n\n  getFilledWord = () => {\n    let filledWord = [];\n    for(let i = 0; i < this.state.secretWord.length; i++) {\n      if(this.state.guesses.includes(this.state.secretWord[i])) {\n        filledWord.push(this.state.secretWord[i]);\n      }\n      else {\n        filledWord.push(\"\");\n      }\n    }\n    return filledWord;\n  }\n\n  getStatus = () => {\n    const currentGuess = this.state.currentGuess;\n\n    if (this.getFilledWord().join(\"\") === this.state.secretWord) {\n      return (<div> You 've guessed the word yo!! </div>);\n    } else if ( currentGuess !== '' && !this.state.secretWord.includes(currentGuess)){\n      const remainingGuesses = this.maxGuesses - this.state.guessCounter;\n      if(remainingGuesses <= 0) {\n         return(<div> Well you used up your chances. The word was <strong>{this.state.secretWord}</strong> Reload and try again!!</div> );\n      } else {\n        return(<div> Well that ain't here  But you have {remainingGuesses} chances</div> );\n      }\n    }\n    return (<div/>)\n  }\n\n  boxWord = () => {\n    return this.getFilledWord().map((character, index) => {\n      return (<Char character={character} key={index} />);\n    });\n  }\n\n  startNewGame = () => {\n    this.setState(this.getNewState());\n  }\n\n  componentWillMount() {\n    document.onkeydown = this.inputHandler;\n  }\n\n  componentWillUnmount() {\n    document.onkeydown = null;\n  }\n\n  render() {\n    let guesses = this.state.guesses;\n    return (\n      <div className=\"App\">\n          <p>\n             I have chosen a word with {this.state.secretWord.length} letters. Guess the word.\n          </p>\n          { this.boxWord() }\n          { this.getStatus() }\n          <div> Your guesses so far: <Char character={guesses.join(\", \")} /> </div> \n          <div><button onClick={this.startNewGame}> Start New Game </button> </div> \n\n      </div>\n    );\n  }\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}